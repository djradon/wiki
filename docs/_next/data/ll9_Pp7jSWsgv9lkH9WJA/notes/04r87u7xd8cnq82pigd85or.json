{"pageProps":{"note":{"id":"04r87u7xd8cnq82pigd85or","title":"Gluegun Vs Oclif","desc":"","updated":1730778866171,"created":1730712283580,"custom":{},"fname":"vs.gluegun-vs-oclif","type":"note","vault":{"fsPath":"public-notes","remote":{"type":"git","url":"git@github.com:djradon/public-notes.git"},"name":"public-notes"},"contentHash":"38cf71bde152b03daf59bcbc8f428923","links":[{"type":"wiki","from":{"fname":"vs.gluegun-vs-oclif","id":"04r87u7xd8cnq82pigd85or","vaultName":"public-notes"},"value":"prdct.oclif","position":{"start":{"line":2,"column":15,"offset":15},"end":{"line":2,"column":30,"offset":30},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"prdct.oclif"}},{"type":"wiki","from":{"fname":"vs.gluegun-vs-oclif","id":"04r87u7xd8cnq82pigd85or","vaultName":"public-notes"},"value":"prdct.gluegun","position":{"start":{"line":2,"column":31,"offset":31},"end":{"line":2,"column":48,"offset":48},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"prdct.gluegun"}},{"type":"wiki","from":{"fname":"vs.gluegun-vs-oclif","id":"04r87u7xd8cnq82pigd85or","vaultName":"public-notes"},"value":"c.software.tui-framework","position":{"start":{"line":343,"column":2,"offset":22700},"end":{"line":343,"column":30,"offset":22728},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"c.software.tui-framework"}},{"type":"wiki","from":{"fname":"vs.gluegun-vs-oclif","id":"04r87u7xd8cnq82pigd85or","vaultName":"public-notes"},"value":"prdct.blessed","alias":"Blessed","position":{"start":{"line":382,"column":48,"offset":25242},"end":{"line":382,"column":73,"offset":25267},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"prdct.blessed"}},{"type":"wiki","from":{"fname":"vs.gluegun-vs-oclif","id":"04r87u7xd8cnq82pigd85or","vaultName":"public-notes"},"value":"prdct.ink","position":{"start":{"line":435,"column":5,"offset":26836},"end":{"line":435,"column":18,"offset":26849},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"prdct.ink"}},{"from":{"fname":"prdct.gluegun","id":"gjsaosaehcd6c442grpqedc","vaultName":"public-notes"},"type":"backlink","position":{"start":{"line":9,"column":15,"offset":298},"end":{"line":9,"column":38,"offset":321},"indent":[]},"value":"vs.gluegun-vs-oclif"},{"from":{"fname":"prdct.gluegun","id":"gjsaosaehcd6c442grpqedc","vaultName":"public-notes"},"type":"backlink","position":{"start":{"line":28,"column":3,"offset":911},"end":{"line":28,"column":26,"offset":934},"indent":[]},"value":"vs.gluegun-vs-oclif"},{"from":{"fname":"prdct.oclif","id":"i1211kezxlz8q23n9eb6j58","vaultName":"public-notes"},"type":"backlink","position":{"start":{"line":26,"column":3,"offset":795},"end":{"line":26,"column":26,"offset":818},"indent":[]},"value":"vs.gluegun-vs-oclif"}],"anchors":{"chatgpt":{"type":"header","text":"chatgpt","value":"chatgpt","line":11,"column":0,"depth":2},"gluegun":{"type":"header","text":"Gluegun:","value":"gluegun","line":15,"column":0,"depth":3},"key-features-of-gluegun":{"type":"header","text":"Key Features of Gluegun:","value":"key-features-of-gluegun","line":18,"column":0,"depth":4},"oclif":{"type":"header","text":"Oclif:","value":"oclif","line":44,"column":0,"depth":3},"key-features-of-oclif":{"type":"header","text":"Key Features of Oclif:","value":"key-features-of-oclif","line":47,"column":0,"depth":4},"comparison-summary":{"type":"header","text":"Comparison Summary:","value":"comparison-summary","line":72,"column":0,"depth":3},"which-one-should-you-use":{"type":"header","text":"Which One Should You Use?","value":"which-one-should-you-use","line":85,"column":0,"depth":3},"conclusion":{"type":"header","text":"Conclusion:","value":"conclusion","line":98,"column":0,"depth":3},"compare-the-interactivity-of-oclif--and-gluegun-chatgpt":{"type":"header","text":"compare the interactivity of oclif  and gluegun (chatgpt)","value":"compare-the-interactivity-of-oclif--and-gluegun-chatgpt","line":109,"column":0,"depth":2},"comparison-of-interactivity-between-gluegun-and-oclif":{"type":"header","text":"Comparison of Interactivity Between Gluegun and Oclif","value":"comparison-of-interactivity-between-gluegun-and-oclif","line":111,"column":0,"depth":3},"gluegun-1":{"type":"header","text":"Gluegun","value":"gluegun-1","line":115,"column":0,"depth":4},"oclif-1":{"type":"header","text":"Oclif","value":"oclif-1","line":150,"column":0,"depth":4},"side-by-side-comparison":{"type":"header","text":"Side-by-Side Comparison:","value":"side-by-side-comparison","line":192,"column":0,"depth":3},"which-one-to-choose-for-interactivity":{"type":"header","text":"Which One to Choose for Interactivity?","value":"which-one-to-choose-for-interactivity","line":203,"column":0,"depth":3},"conclusion-1":{"type":"header","text":"Conclusion:","value":"conclusion-1","line":215,"column":0,"depth":3},"what-if-i-wanted-prompts-to-be-dynamic-over-the-network-like-not-pre-defined-but-a-remote-server--gives-the-options":{"type":"header","text":"What if I wanted prompts to be dynamic over the network, like not pre-defined but a remote server  gives the options","value":"what-if-i-wanted-prompts-to-be-dynamic-over-the-network-like-not-pre-defined-but-a-remote-server--gives-the-options","line":218,"column":0,"depth":2},"dynamic-prompts-over-the-network---concept-overview":{"type":"header","text":"Dynamic Prompts Over the Network - Concept Overview","value":"dynamic-prompts-over-the-network---concept-overview","line":222,"column":0,"depth":3},"example-with-gluegun":{"type":"header","text":"Example with Gluegun:","value":"example-with-gluegun","line":231,"column":0,"depth":4},"example-with-oclif":{"type":"header","text":"Example with Oclif:","value":"example-with-oclif","line":269,"column":0,"depth":4},"comparison-gluegun-vs-oclif-for-dynamic-prompts":{"type":"header","text":"Comparison: Gluegun vs Oclif for Dynamic Prompts:","value":"comparison-gluegun-vs-oclif-for-dynamic-prompts","line":309,"column":0,"depth":3},"detailed-steps-to-implement-dynamic-prompts-over-the-network":{"type":"header","text":"Detailed Steps to Implement Dynamic Prompts Over the Network:","value":"detailed-steps-to-implement-dynamic-prompts-over-the-network","line":318,"column":0,"depth":3},"which-one-is-better-for-dynamic-prompts":{"type":"header","text":"Which One Is Better for Dynamic Prompts?","value":"which-one-is-better-for-dynamic-prompts","line":334,"column":0,"depth":3},"conclusion-2":{"type":"header","text":"Conclusion:","value":"conclusion-2","line":339,"column":0,"depth":3},"what-if-i-want-to-build-a-whole-text-based-cli-that-has-various-information-displayed-and-then-a-cliprompt-on-the-bottom":{"type":"header","text":"What if I want to build a whole text-based cli that has various information displayed, and then a CLI/prompt on the bottom.","value":"what-if-i-want-to-build-a-whole-text-based-cli-that-has-various-information-displayed-and-then-a-cliprompt-on-the-bottom","line":347,"column":0,"depth":2},"requirements-for-your-use-case":{"type":"header","text":"Requirements for Your Use Case:","value":"requirements-for-your-use-case","line":355,"column":0,"depth":3},"tools-for-building-a-tui":{"type":"header","text":"Tools for Building a TUI","value":"tools-for-building-a-tui","line":366,"column":0,"depth":3},"1-using-gluegun-or-oclif-as-the-core-command-framework":{"type":"header","text":"1. Using Gluegun or Oclif as the Core Command Framework:","value":"1-using-gluegun-or-oclif-as-the-core-command-framework","line":370,"column":0,"depth":4},"2-tui-librariestools-for-javascript-and-typescript":{"type":"header","text":"2. TUI Libraries/Tools for JavaScript and TypeScript:","value":"2-tui-librariestools-for-javascript-and-typescript","line":383,"column":0,"depth":4},"1-blessed-and-blessed-contrib":{"type":"header","text":"1. Blessed and Blessed-Contrib:","value":"1-blessed-and-blessed-contrib","line":386,"column":0,"depth":5},"2-ink":{"type":"header","text":"2. Ink:","value":"2-ink","line":440,"column":0,"depth":5},"3-vorpal":{"type":"header","text":"3. Vorpal:","value":"3-vorpal","line":479,"column":0,"depth":5},"which-approach-should-you-choose":{"type":"header","text":"Which Approach Should You Choose?","value":"which-approach-should-you-choose","line":502,"column":0,"depth":3},"summary":{"type":"header","text":"Summary:","value":"summary","line":512,"column":0,"depth":3},"how-does-gluegun-toolbox-provides-utilities-for-easy-integration-with-tui-libraries":{"type":"header","text":"how does gluegun toolbox provides utilities for easy integration with TUI libraries?","value":"how-does-gluegun-toolbox-provides-utilities-for-easy-integration-with-tui-libraries","line":519,"column":0,"depth":2},"references":{"type":"header","text":"References","value":"references","line":523,"column":0,"depth":2}},"children":[],"parent":"y1gcp9ejsspitoo2rfeiu5p","data":{}},"body":"<h1 id=\"gluegun-vs-oclif\">Gluegun Vs Oclif<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gluegun-vs-oclif\"></a></h1>\n<ul>\n<li>comparands: <a href=\"/wiki/notes/i1211kezxlz8q23n9eb6j58\">Oclif</a> <a href=\"/wiki/notes/gjsaosaehcd6c442grpqedc\">Gluegun</a></li>\n</ul>\n<h2 id=\"chatgpt\">chatgpt<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#chatgpt\"></a></h2>\n<p>Let's compare <strong>Gluegun</strong> and <strong>Oclif</strong> for modular CLI development:</p>\n<h3 id=\"gluegun\"><strong>Gluegun</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gluegun\"></a></h3>\n<p><strong>Gluegun</strong> is a toolkit for building CLI applications in JavaScript or TypeScript. It's designed to be very flexible, allowing developers to build rich, modular, and interactive CLI tools. Here's what sets Gluegun apart:</p>\n<h4 id=\"key-features-of-gluegun\">Key Features of Gluegun:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-features-of-gluegun\"></a></h4>\n<ol>\n<li>\n<p><strong>Modular and Pluggable</strong>:</p>\n<ul>\n<li>Gluegun emphasizes <strong>modularity</strong> by encouraging the use of <strong>extensions</strong> and <strong>plugins</strong>.</li>\n<li>You can easily add extensions for different parts of your CLI, such as configuration management, filesystem operations, or even HTTP requests.</li>\n</ul>\n</li>\n<li>\n<p><strong>\"All-Star Cast of Libraries\"</strong>:</p>\n<ul>\n<li>Gluegun uses popular and proven libraries internally, like:\n<ul>\n<li><strong>Inquirer.js</strong> for interactive prompts.</li>\n<li><strong>Chalk</strong> for colorful output.</li>\n<li><strong>Enquirer</strong> for additional prompts.</li>\n<li><strong>Filesystem (fs-jetpack)</strong> for interacting with the filesystem in an intuitive manner.</li>\n</ul>\n</li>\n<li>This \"all-star\" setup provides a developer-friendly experience because it builds on well-established tools that many JavaScript developers are already familiar with.</li>\n</ul>\n</li>\n<li>\n<p><strong>Simplified CLI Command Structure</strong>:</p>\n<ul>\n<li>Gluegun encourages creating commands as individual files in a commands directory.</li>\n<li>Each command can easily include <strong>validation</strong>, <strong>arguments</strong>, <strong>options</strong>, and <strong>actions</strong>, which makes adding and modifying commands straightforward.</li>\n<li>Gluegun also makes it easy to create subcommands and separate complex CLI tools into modular pieces.</li>\n</ul>\n</li>\n<li>\n<p><strong>Built-in Toolkit</strong>:</p>\n<ul>\n<li>Provides utilities like <strong>filesystem</strong>, <strong>print</strong> (for logs), and <strong>http</strong> as part of its <code>toolbox</code>.</li>\n<li>The toolbox object can be passed around to different parts of the application, making it easy to share utilities without explicitly importing them in each module.</li>\n</ul>\n</li>\n<li>\n<p><strong>Good for Prototyping</strong>:</p>\n<ul>\n<li>Gluegun’s philosophy of <strong>low boilerplate</strong> and high productivity makes it an excellent choice for prototyping CLI tools quickly.</li>\n<li>The configuration files and the use of JSON or YAML can be easily managed due to the integrated tooling.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"oclif\"><strong>Oclif</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#oclif\"></a></h3>\n<p><strong>Oclif</strong>, developed by Heroku (now a part of Salesforce), is another popular framework for building command-line tools in Node.js. It is particularly well-suited for building large, production-grade CLI tools that require precise control, stability, and maintainability.</p>\n<h4 id=\"key-features-of-oclif\">Key Features of Oclif:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#key-features-of-oclif\"></a></h4>\n<ol>\n<li>\n<p><strong>Command and Plugin-Based Architecture</strong>:</p>\n<ul>\n<li><strong>Oclif</strong> uses a <strong>command/plugin-based</strong> architecture, where each command is defined in its own file or as part of a plugin.</li>\n<li>This architecture scales well for larger projects where you want to group functionality into plugins, which can be individually maintained or even shared with others.</li>\n</ul>\n</li>\n<li>\n<p><strong>First-Class TypeScript Support</strong>:</p>\n<ul>\n<li>Oclif has <strong>built-in TypeScript support</strong> which allows developers to create strongly typed CLIs.</li>\n<li>It includes proper type definitions and setup that make working with TypeScript easy from the get-go, enhancing maintainability.</li>\n</ul>\n</li>\n<li>\n<p><strong>Autogenerated CLI Documentation</strong>:</p>\n<ul>\n<li>Oclif automatically <strong>generates CLI documentation</strong> based on the commands and arguments you provide, ensuring consistency between code and docs.</li>\n<li>It also supports generating Markdown-based help and documentation, which is great for developer experience.</li>\n</ul>\n</li>\n<li>\n<p><strong>Built for Production</strong>:</p>\n<ul>\n<li>Oclif is <strong>battle-tested</strong> by Heroku and is well-suited for building <strong>enterprise-level CLI tools</strong>.</li>\n<li>Its strict structure helps enforce <strong>best practices</strong>, making sure that projects stay clean and maintainable as they grow.</li>\n</ul>\n</li>\n<li>\n<p><strong>Extensible Plugins</strong>:</p>\n<ul>\n<li>Oclif is highly extensible through <strong>plugins</strong>, which can be published and shared with others.</li>\n<li>You can add plugins like authentication helpers, telemetry, or commands that you may need in other projects, promoting code reuse.</li>\n</ul>\n</li>\n<li>\n<p><strong>Validation and Input Handling</strong>:</p>\n<ul>\n<li>Commands in Oclif are well-structured and come with excellent <strong>argument and flag validation</strong> out of the box, reducing the amount of manual parsing developers need to do.</li>\n<li>The use of decorators in TypeScript helps in cleanly defining expected inputs and outputs.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"comparison-summary\"><strong>Comparison Summary</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#comparison-summary\"></a></h3>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>Gluegun</strong></th><th><strong>Oclif</strong></th></tr></thead><tbody><tr><td><strong>Modularity</strong></td><td>Extension-based; flexible and pluggable. Good for small-to-medium CLI projects.</td><td>Plugin-based; structured and ideal for enterprise-level projects. Plugins are well-maintained and reusable.</td></tr><tr><td><strong>Built-in Libraries</strong></td><td>\"All-star\" libraries like Inquirer, Chalk, fs-jetpack, which are familiar to JS developers.</td><td>Minimal built-ins but very structured, relying on plugins for extended functionality.</td></tr><tr><td><strong>Scalability</strong></td><td>Great for <strong>prototyping</strong> and small projects. Can be used for more, but less opinionated structure might lead to inconsistency.</td><td>Built for <strong>large, production-grade</strong> tools. Enforces best practices, consistent structure.</td></tr><tr><td><strong>Ease of Use</strong></td><td>Fast to set up, easy to add commands with low boilerplate. Great for quick tools.</td><td>A bit more setup required, but results in a clean, maintainable CLI project.</td></tr><tr><td><strong>TypeScript Support</strong></td><td>Can be used with TypeScript, but less out-of-the-box support.</td><td>Native support for TypeScript, making it great for typed, enterprise-level projects.</td></tr><tr><td><strong>Learning Curve</strong></td><td>Easier for developers familiar with the underlying \"all-star\" tools like Chalk or Inquirer.</td><td>Requires understanding of Oclif-specific structures, but great for enforcing uniformity.</td></tr><tr><td><strong>Generated Documentation</strong></td><td>No built-in automated doc generation. Developers need to handle help descriptions manually.</td><td>Automatically generates documentation based on command definitions.</td></tr><tr><td><strong>Extensibility</strong></td><td>Toolbox approach for easy extension, but typically project-specific.</td><td>Highly extensible through official and community plugins, allowing shared, reusable functionality.</td></tr></tbody></table></div>\n<h3 id=\"which-one-should-you-use\"><strong>Which One Should You Use?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#which-one-should-you-use\"></a></h3>\n<ul>\n<li>\n<p><strong>Use Gluegun If</strong>:</p>\n<ul>\n<li>You are building a CLI tool that requires rapid prototyping and development.</li>\n<li>You value <strong>flexibility</strong> and prefer working with well-known JavaScript libraries.</li>\n<li>You like the idea of having a toolbox of utilities already built-in, which can be passed around without additional imports.</li>\n</ul>\n</li>\n<li>\n<p><strong>Use Oclif If</strong>:</p>\n<ul>\n<li>You are building a <strong>production-grade</strong>, scalable CLI with multiple commands and plugins.</li>\n<li>You want <strong>first-class TypeScript support</strong> with strict type checking for better maintainability.</li>\n<li>You need features like autogenerated documentation, plugins, and strong argument validation.</li>\n<li>You prioritize a structured approach that enforces consistency as your CLI grows.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"conclusion\">Conclusion:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion\"></a></h3>\n<p>Both <strong>Gluegun</strong> and <strong>Oclif</strong> are excellent choices depending on your use case. If you're working on <strong>Semantic Flow CLI</strong> and want something modular with rapid development and prototyping capabilities, <strong>Gluegun</strong> might be the right fit due to its flexibility and integrated library support.</p>\n<p>However, if you want to build a highly organized, enterprise-level CLI with multiple plugins, subcommands, and perhaps <strong>first-class TypeScript support</strong>, <strong>Oclif</strong> would provide more structure and be easier to maintain in the long term.</p>\n<p>Since you're interested in modularizing the code and considering moving subcommands under root commands, Gluegun's modular toolbox approach might also make for a smoother development experience. Additionally, Gluegun's integration of familiar libraries could help speed up implementation without needing to learn a whole new framework-specific way of doing things.</p>\n<p>Let me know how you’d like to proceed or if you need more detailed guidance on how to implement a transition!</p>\n<h2 id=\"compare-the-interactivity-of-oclif--and-gluegun-chatgpt\">compare the interactivity of oclif  and gluegun (chatgpt)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#compare-the-interactivity-of-oclif--and-gluegun-chatgpt\"></a></h2>\n<h3 id=\"comparison-of-interactivity-between-gluegun-and-oclif\">Comparison of Interactivity Between <strong>Gluegun</strong> and <strong>Oclif</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#comparison-of-interactivity-between-gluegun-and-oclif\"></a></h3>\n<p><strong>Gluegun</strong> and <strong>Oclif</strong> both provide ways to build interactive command-line interfaces, but they differ significantly in their approach to interactivity, flexibility, and developer experience. Let’s dive into how each one handles interactivity and compare them directly:</p>\n<h4 id=\"gluegun-1\"><strong>Gluegun</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#gluegun-1\"></a></h4>\n<p><strong>Gluegun</strong> is particularly strong when it comes to creating interactive CLIs. It leverages an \"all-star cast of libraries\" that have well-known, powerful interactive capabilities. Let’s break down some of the interactivity features:</p>\n<ol>\n<li>\n<p><strong>Built-In Support for Popular Libraries</strong>:</p>\n<ul>\n<li><strong>Inquirer.js</strong> and <strong>Enquirer</strong> are used internally to provide interactive prompts, which makes the setup of questions, forms, and multi-step workflows very intuitive.</li>\n<li>You get features like input validation, lists, checkboxes, confirmation prompts, and even advanced input elements like password fields.</li>\n</ul>\n</li>\n<li>\n<p><strong>Toolbox Approach</strong>:</p>\n<ul>\n<li>Gluegun’s \"toolbox\" is passed to every command, and it includes utilities for <strong>filesystem</strong>, <strong>print</strong>, <strong>http</strong>, and more. The <code>toolbox.prompt</code> makes it very straightforward to create interactive commands.</li>\n<li>By bundling interactive prompt utilities directly in the <code>toolbox</code>, it ensures you have access to all necessary utilities without having to import them repeatedly, providing a clean developer experience.</li>\n</ul>\n</li>\n<li>\n<p><strong>Rich User Experience</strong>:</p>\n<ul>\n<li>Using <strong>Chalk</strong> (for colorful output) and <strong>Inquirer.js</strong>, Gluegun can create interactive prompts that look attractive and provide a good user experience.</li>\n<li>It offers flexibility to control the flow of interactions in a seamless way. For example, you could easily create conditional questions, where subsequent prompts depend on the user's previous answers.</li>\n</ul>\n</li>\n<li>\n<p><strong>Ease of Use</strong>:</p>\n<ul>\n<li>Gluegun emphasizes rapid prototyping, so the interactive elements are quick to integrate without a steep learning curve.</li>\n<li>Creating prompts is simple. Example:\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> prompt <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> toolbox<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> prompt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'What is your name?'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'confirm'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'confirm'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Do you want to proceed?'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li>This syntax is clean, concise, and easy to extend, making the interactive features accessible to developers of all skill levels.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"oclif-1\"><strong>Oclif</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#oclif-1\"></a></h4>\n<p><strong>Oclif</strong>, designed by Heroku, focuses on building robust, production-grade CLI tools. It provides a different approach to interactivity:</p>\n<ol>\n<li>\n<p><strong>Minimal Built-In Interactive Features</strong>:</p>\n<ul>\n<li>\n<p><strong>Oclif</strong> is less opinionated about interactivity and does not include libraries like <strong>Inquirer.js</strong> directly.</p>\n</li>\n<li>\n<p>To add interactivity, you need to bring in a library yourself (such as <code>inquirer</code>, <code>prompt</code>, or <code>readline</code>). While this adds flexibility, it also means a bit more setup is needed compared to Gluegun.</p>\n</li>\n<li>\n<p>Example of using <code>inquirer</code> with Oclif:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> inquirer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inquirer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyCommand</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> answers <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'input'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'What is your name?'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'confirm'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'confirm'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Do you want to proceed?'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>answers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n</li>\n<li>\n<p>Here, you need to manually include <code>inquirer</code> or a similar library and set up the questions.</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>TypeScript Integration</strong>:</p>\n<ul>\n<li>One strength of <strong>Oclif</strong> is its native TypeScript support, allowing interactive prompts to be strongly typed. This can be useful if you want your prompt responses to be automatically checked by TypeScript.</li>\n<li>It also means you can enforce strict validation through TypeScript interfaces, giving your interactive prompts a more predictable and controlled behavior.</li>\n</ul>\n</li>\n<li>\n<p><strong>Control and Extensibility</strong>:</p>\n<ul>\n<li><strong>Oclif</strong> provides more control over the structure of your CLI, making it ideal for building production-grade tools with rigorous requirements.</li>\n<li>However, interactivity isn't its primary strength, as it leans towards a modular plugin architecture, which focuses more on scalability and command organization.</li>\n</ul>\n</li>\n<li>\n<p><strong>Structured Input Handling</strong>:</p>\n<ul>\n<li>Commands and flags in <strong>Oclif</strong> are very structured. You get good argument and flag validation but less focus on rich, interactive inputs.</li>\n<li>For commands that need more than just command-line flags, the integration of <code>inquirer</code> or similar libraries can make Oclif just as interactive, but this requires more effort.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"side-by-side-comparison\"><strong>Side-by-Side Comparison</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#side-by-side-comparison\"></a></h3>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>Gluegun</strong></th><th><strong>Oclif</strong></th></tr></thead><tbody><tr><td><strong>Interactive Prompts</strong></td><td>Built-in through <strong>Enquirer</strong> and <strong>Inquirer.js</strong>.</td><td>Requires importing third-party libraries like <code>inquirer</code>.</td></tr><tr><td><strong>Ease of Setting Up Interactivity</strong></td><td>Very easy, part of the toolbox; minimal setup required.</td><td>Requires manual setup, adding dependencies like <code>inquirer</code>.</td></tr><tr><td><strong>User Experience</strong></td><td>Rich, highly interactive, colorful prompts through <strong>Chalk</strong>.</td><td>Basic interactivity; more manual control but less integration out of the box.</td></tr><tr><td><strong>Modular Interaction Handling</strong></td><td>Interactivity is baked into the command through the <code>toolbox</code>.</td><td>Interactivity is added on top of commands; the focus is on structured input with arguments and flags.</td></tr><tr><td><strong>Extensibility</strong></td><td>Interactive utilities are part of the Gluegun toolbox.</td><td>Extensible through plugins, but interactivity needs to be added by the user.</td></tr><tr><td><strong>TypeScript Integration</strong></td><td>Possible but not built-in; Gluegun can use TypeScript, but requires manual setup.</td><td>First-class support; interactive elements can be typed if libraries like <code>inquirer</code> are used.</td></tr></tbody></table></div>\n<h3 id=\"which-one-to-choose-for-interactivity\"><strong>Which One to Choose for Interactivity?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#which-one-to-choose-for-interactivity\"></a></h3>\n<ul>\n<li>\n<p><strong>Choose Gluegun</strong> if:</p>\n<ul>\n<li>You need a <strong>highly interactive CLI</strong> with rich user prompts, and you want the setup to be as easy as possible.</li>\n<li>You value having interactive tools integrated out of the box, with minimal configuration.</li>\n<li>You are looking to <strong>prototype quickly</strong> with familiar tools like <strong>Inquirer.js</strong> and <strong>Chalk</strong>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Choose Oclif</strong> if:</p>\n<ul>\n<li>Your CLI focuses on <strong>command structure, stability, and extensibility</strong> more than interactivity.</li>\n<li>You need <strong>strict validation</strong> and <strong>strong typing</strong> for inputs and are willing to put in more effort to build a polished, production-grade CLI.</li>\n<li>You prefer to have control over which third-party libraries you include for interactivity, and you want a more explicit and customized integration.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"conclusion-1\">Conclusion:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion-1\"></a></h3>\n<p>Gluegun is the better choice if you want <strong>easy interactivity</strong> with rich, attractive prompts, as it integrates these tools right into the framework. It makes building a modular and interactive CLI tool a breeze, with less initial setup. Oclif, on the other hand, is more structured, suitable for larger, production-level tools that may not prioritize interactivity as much. While Oclif can also be made interactive, it requires additional steps and lacks the seamless out-of-the-box experience that Gluegun provides for interactive command-line prompts.</p>\n<h2 id=\"what-if-i-wanted-prompts-to-be-dynamic-over-the-network-like-not-pre-defined-but-a-remote-server--gives-the-options\">What if I wanted prompts to be dynamic over the network, like not pre-defined but a remote server  gives the options<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-if-i-wanted-prompts-to-be-dynamic-over-the-network-like-not-pre-defined-but-a-remote-server--gives-the-options\"></a></h2>\n<p>If you want prompts to be <strong>dynamic over the network</strong>, where options are not predefined but fetched from a remote server, you'll need to modify how you handle the prompts in the CLI. Both <strong>Gluegun</strong> and <strong>Oclif</strong> can achieve this, though their approaches will differ based on modularity, flexibility, and developer comfort.</p>\n<h3 id=\"dynamic-prompts-over-the-network---concept-overview\"><strong>Dynamic Prompts Over the Network - Concept Overview</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#dynamic-prompts-over-the-network---concept-overview\"></a></h3>\n<ol>\n<li>\n<p><strong>Make a Network Request</strong>:</p>\n<ul>\n<li>Use an HTTP client to send a request to a server that responds with the data needed for the prompt (e.g., available options).</li>\n<li>The response from the server could include a list of choices, text options, etc.</li>\n</ul>\n</li>\n<li>\n<p><strong>Modify Prompt Logic</strong>:</p>\n<ul>\n<li>Depending on the response, dynamically adjust the question type and options.</li>\n<li>This approach can make your CLI more adaptive, allowing prompts to change based on server conditions, user-specific settings, or real-time updates.</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"example-with-gluegun\">Example with <strong>Gluegun</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example-with-gluegun\"></a></h4>\n<p>Gluegun, with its built-in <strong>HTTP client</strong> (<code>toolbox.http</code>) and prompt utilities, is well-suited for this kind of dynamic prompting. Here’s how you might approach it:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'example'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">run</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token parameter\">toolbox</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> prompt<span class=\"token punctuation\">,</span> http<span class=\"token punctuation\">,</span> print <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> toolbox<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Fetch dynamic data from a server</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> http<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/api/options'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">options</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Use the fetched options in the prompt</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> prompt<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">ask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'select'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'choice'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Please select an option:'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">choices</span><span class=\"token operator\">:</span> options\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        print<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">info</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You selected: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token punctuation\">.</span><span class=\"token property-access\">choice</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        print<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed to retrieve options from the server.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      print<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Network error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>Network Request</strong>: <code>http.get('https://example.com/api/options')</code> fetches the options.</li>\n<li><strong>Dynamic Prompt</strong>: The response's <code>options</code> array is used directly in the prompt. Gluegun’s <code>prompt.ask()</code> can easily adapt to the server-provided options.</li>\n</ul>\n<h4 id=\"example-with-oclif\">Example with <strong>Oclif</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#example-with-oclif\"></a></h4>\n<p>In <strong>Oclif</strong>, you’ll need to include your own HTTP library, such as <code>axios</code> or the built-in <code>fetch()</code>, since Oclif doesn't have a built-in HTTP client like Gluegun. Here's a similar example using Oclif:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token maybe-class-name\">Command</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@oclif/core'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DynamicPromptCommand</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">async</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://example.com/api/options'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span><span class=\"token property-access\">status</span> <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">options</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">const</span> inquirer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'inquirer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> answers <span class=\"token operator\">=</span> <span class=\"token keyword control-flow\">await</span> inquirer<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'list'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'choice'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">message</span><span class=\"token operator\">:</span> <span class=\"token string\">'Please select an option:'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">choices</span><span class=\"token operator\">:</span> options\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You selected: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>answers<span class=\"token punctuation\">.</span><span class=\"token property-access\">choice</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Failed to retrieve options from the server.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword control-flow\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Network error: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>error<span class=\"token punctuation\">.</span><span class=\"token property-access\">message</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token maybe-class-name\">DynamicPromptCommand</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">description</span> <span class=\"token operator\">=</span> <span class=\"token string\">'A command that demonstrates dynamic prompting over the network'</span><span class=\"token punctuation\">;</span>\nmodule<span class=\"token punctuation\">.</span><span class=\"token property-access\">exports</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">DynamicPromptCommand</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>Network Request</strong>: Uses <code>axios</code> to make a request to the API.</li>\n<li><strong>Prompt</strong>: Uses <code>inquirer</code> to create a prompt based on the server response.</li>\n</ul>\n<h3 id=\"comparison-gluegun-vs-oclif-for-dynamic-prompts\"><strong>Comparison: Gluegun vs Oclif for Dynamic Prompts</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#comparison-gluegun-vs-oclif-for-dynamic-prompts\"></a></h3>\n<div class=\"table-responsive\">\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th><strong>Feature</strong></th><th><strong>Gluegun</strong></th><th><strong>Oclif</strong></th></tr></thead><tbody><tr><td><strong>Built-in HTTP Client</strong></td><td>Yes (<code>toolbox.http</code>), which makes it easier to request data without adding extra dependencies.</td><td>No. You need to use <code>axios</code>, <code>node-fetch</code>, or similar.</td></tr><tr><td><strong>Prompt Integration</strong></td><td>Seamless with <code>toolbox.prompt.ask()</code>, allowing fetched data to be used directly in the prompts.</td><td>Requires setting up a third-party library like <code>inquirer</code> for interactivity.</td></tr><tr><td><strong>Ease of Dynamic Prompt Setup</strong></td><td>Gluegun’s modular toolbox design makes it quick to set up a prompt based on network response.</td><td>Oclif requires importing libraries (<code>inquirer</code> and an HTTP client) and setting up the prompt manually.</td></tr><tr><td><strong>Modularity</strong></td><td>The <code>toolbox</code> approach lets you reuse the HTTP client and prompt easily across commands.</td><td>Oclif commands are inherently modular but require more setup for dynamic prompts since utilities aren’t integrated.</td></tr></tbody></table></div>\n<h3 id=\"detailed-steps-to-implement-dynamic-prompts-over-the-network\"><strong>Detailed Steps to Implement Dynamic Prompts Over the Network</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#detailed-steps-to-implement-dynamic-prompts-over-the-network\"></a></h3>\n<ol>\n<li>\n<p><strong>Fetch Data</strong>:</p>\n<ul>\n<li>In both frameworks, you would fetch data from a remote API endpoint.</li>\n<li>In Gluegun, you can use <code>toolbox.http.get()</code>.</li>\n<li>In Oclif, use <code>axios</code> or the built-in <code>fetch()</code>.</li>\n</ul>\n</li>\n<li>\n<p><strong>Parse the Response</strong>:</p>\n<ul>\n<li>Extract the required values for your prompt from the response.</li>\n<li>Ensure to handle network errors gracefully, as the prompts depend on the success of the request.</li>\n</ul>\n</li>\n<li>\n<p><strong>Dynamically Update Prompts</strong>:</p>\n<ul>\n<li>Use the fetched data to define the options for your prompt.</li>\n<li>In Gluegun, use <code>toolbox.prompt.ask()</code> and dynamically adjust based on the API response.</li>\n<li>In Oclif, use <code>inquirer.prompt()</code> to create dynamic prompts.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"which-one-is-better-for-dynamic-prompts\"><strong>Which One Is Better for Dynamic Prompts?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#which-one-is-better-for-dynamic-prompts\"></a></h3>\n<ul>\n<li><strong>Gluegun</strong> is <strong>better suited</strong> for dynamically-generated prompts due to its integrated <code>toolbox.http</code> client and built-in interactive prompt library. This setup reduces the number of dependencies and lines of code, making the process of fetching and using server-driven data more seamless.</li>\n<li><strong>Oclif</strong> can certainly achieve the same result, but requires <strong>manual integration of third-party libraries</strong>, like <code>axios</code> and <code>inquirer</code>. This makes the setup more cumbersome compared to Gluegun, but Oclif provides more <strong>explicit control</strong> over what libraries are used, which might be preferable in some production environments.</li>\n</ul>\n<h3 id=\"conclusion-2\">Conclusion:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conclusion-2\"></a></h3>\n<p>If you want to build a CLI that dynamically changes its options based on data fetched from a server, <strong>Gluegun</strong> provides a more integrated, easy-to-use environment. The <code>toolbox</code> abstraction, combined with powerful built-in interactive utilities, makes it a natural fit for such scenarios.</p>\n<p>On the other hand, if you prefer a more explicit setup where you control each dependency and have strong typing (especially if using TypeScript), <strong>Oclif</strong> is a viable option but with added boilerplate.</p>\n<p>For your use case of making prompts dynamic over the network, Gluegun would likely offer a smoother developer experience due to its toolbox-based architecture and the all-in-one approach to utilities like HTTP requests and prompting.</p>\n<h2 id=\"what-if-i-want-to-build-a-whole-text-based-cli-that-has-various-information-displayed-and-then-a-cliprompt-on-the-bottom\">What if I want to build a whole text-based cli that has various information displayed, and then a CLI/prompt on the bottom.<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-if-i-want-to-build-a-whole-text-based-cli-that-has-various-information-displayed-and-then-a-cliprompt-on-the-bottom\"></a></h2>\n<p>(<a href=\"/wiki/notes/afho5cwsziio2t1rmtl3cmn\">TUI Framewok</a>)</p>\n<p>If you want to build a text-based CLI that includes <strong>various information displayed</strong> on the screen with a <strong>CLI prompt at the bottom</strong>, you're essentially looking to create a <strong>TUI (Text-based User Interface)</strong> that allows continuous user interaction.</p>\n<p>Here’s an overview of how you could approach building such a tool, along with the comparative use of <strong>Gluegun</strong> and <strong>Oclif</strong>, and other options:</p>\n<h3 id=\"requirements-for-your-use-case\">Requirements for Your Use Case:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#requirements-for-your-use-case\"></a></h3>\n<ol>\n<li>\n<p><strong>Text Display Panel</strong>:</p>\n<ul>\n<li>Display static or dynamic information at the top or side of the terminal window.</li>\n<li>For example, this could include stats, details about the repository, information logs, or even status updates.</li>\n</ul>\n</li>\n<li>\n<p><strong>CLI/Prompt at the Bottom</strong>:</p>\n<ul>\n<li>Continuously show a command prompt at the bottom, allowing users to enter commands while still being able to see the information displayed above.</li>\n</ul>\n</li>\n<li>\n<p><strong>Interactive Flow</strong>:</p>\n<ul>\n<li>Allow for commands that might modify what’s displayed, add more information, or interact with the filesystem in real-time.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"tools-for-building-a-tui\">Tools for Building a TUI<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tools-for-building-a-tui\"></a></h3>\n<p><strong>Neither Gluegun nor Oclif is specifically designed for TUI applications</strong> out of the box. They are more focused on standard CLI tools. However, you can still achieve the desired functionality by combining other libraries or using TUI-specific frameworks. Here are some approaches:</p>\n<h4 id=\"1-using-gluegun-or-oclif-as-the-core-command-framework\">1. <strong>Using Gluegun or Oclif as the Core Command Framework</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-using-gluegun-or-oclif-as-the-core-command-framework\"></a></h4>\n<ul>\n<li>\n<p>You can combine <strong>Gluegun</strong> or <strong>Oclif</strong> with additional TUI libraries to create a full text-based interface.</p>\n</li>\n<li>\n<p><strong>Gluegun</strong>: </p>\n<ul>\n<li>It is highly modular, meaning you could extend the command logic to include display elements using other libraries.</li>\n<li>The toolbox provides utilities for easy integration with TUI libraries.</li>\n</ul>\n</li>\n<li>\n<p><strong>Oclif</strong>:</p>\n<ul>\n<li>You could use Oclif as the base framework for commands and flags but would need a separate mechanism for managing the interface continuously.</li>\n</ul>\n</li>\n</ul>\n<p>To achieve a full TUI:</p>\n<ul>\n<li>You would combine <strong>either Gluegun or Oclif</strong> for handling command inputs and arguments with a TUI library for the actual text-based display.</li>\n</ul>\n<h4 id=\"2-tui-librariestools-for-javascript-and-typescript\">2. <strong>TUI Libraries/Tools for JavaScript and TypeScript</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-tui-librariestools-for-javascript-and-typescript\"></a></h4>\n<p>To create a <strong>text-based interface</strong> with a command prompt at the bottom, you’d use a TUI library designed specifically for building more interactive and visually rich command-line interfaces:</p>\n<h5 id=\"1-blessed-and-blessed-contrib\"><strong>1. Blessed and Blessed-Contrib</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#1-blessed-and-blessed-contrib\"></a></h5>\n<ul>\n<li>\n<p><strong><a href=\"https://github.com/chjj/blessed\">Blessed</a></strong> is a JavaScript library for creating TUIs, similar to ncurses for Node.js.</p>\n</li>\n<li>\n<p><strong>Blessed-Contrib</strong>: This is an extension of <a href=\"/wiki/notes/9q737vcn7smqh7dhjrbk36w\">Blessed</a> that makes it easier to create more sophisticated dashboards with charts, grids, tables, and other components.</p>\n</li>\n<li>\n<p><strong>Example Usage</strong>:</p>\n<ul>\n<li>You can create a window layout using Blessed that includes different areas for displaying information.</li>\n<li>The prompt at the bottom could be implemented as an <strong>input box</strong> that users interact with.</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> blessed <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blessed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> contrib <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blessed-contrib'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> screen <span class=\"token operator\">=</span> blessed<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">screen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Create a grid layout</span>\n<span class=\"token keyword\">const</span> grid <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">contrib<span class=\"token punctuation\">.</span>grid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">rows</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">cols</span><span class=\"token operator\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">screen</span><span class=\"token operator\">:</span> screen <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Adding elements to the grid (e.g., a log panel)</span>\n<span class=\"token keyword\">const</span> log <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> blessed<span class=\"token punctuation\">.</span><span class=\"token property-access\">log</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">'Log'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">tags</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'line'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">fg</span><span class=\"token operator\">:</span> <span class=\"token string\">'cyan'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Add an input field at the bottom for user commands</span>\n<span class=\"token keyword\">const</span> input <span class=\"token operator\">=</span> blessed<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">textbox</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">bottom</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">height</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">inputOnFocus</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">label</span><span class=\"token operator\">:</span> <span class=\"token string\">' Command Prompt '</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'line'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">style</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">border</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">fg</span><span class=\"token operator\">:</span> <span class=\"token string\">'yellow'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nscreen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscreen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">append</span><span class=\"token punctuation\">(</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ninput<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ninput<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'submit'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  log<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You entered: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">clearValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  input<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  screen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nscreen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">key</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'C-c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> process<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nscreen<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>Explanation</strong>:\n<ul>\n<li><strong><code>blessed.log</code></strong>: Displays a running log (can show command outputs or dynamic info).</li>\n<li><strong><code>textbox</code></strong>: Acts as a command prompt, allowing users to enter commands and display the results.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"2-ink\"><strong>2. Ink</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#2-ink\"></a></h5>\n<ul>\n<li>\n<p><strong><a href=\"/wiki/notes/b3amvwy6ms8jgmyuvj51sg9\">Ink</a></strong> is a library for building beautiful and interactive CLIs using React.</p>\n</li>\n<li>\n<p>It lets you build UIs using React components, which can include interactive prompts, dynamic displays, and so on.</p>\n</li>\n<li>\n<p><strong>Example of Usage</strong>:</p>\n<ul>\n<li>You could define components that display various information while always keeping an input prompt at the bottom for user interaction.</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> <span class=\"token imports\"><span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Box</span><span class=\"token punctuation\">,</span> useInput <span class=\"token punctuation\">}</span></span> <span class=\"token keyword module\">from</span> <span class=\"token string\">'ink'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>log<span class=\"token punctuation\">,</span> setLog<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">input<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword control-flow\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">.</span><span class=\"token keyword control-flow\">return</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setLog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token spread operator\">...</span>log<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">You entered: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>input<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Box</span> flexDirection<span class=\"token operator\">=</span><span class=\"token string\">\"column\"</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Box</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Text</span><span class=\"token operator\">></span><span class=\"token maybe-class-name\">Press</span> enter after typing your command<span class=\"token operator\">:</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Text</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Box</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Box</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>log<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">entry<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">(</span>\n          <span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">Text</span> key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>index<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>entry<span class=\"token punctuation\">}</span><span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Text</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Box</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&#x3C;</span><span class=\"token operator\">/</span><span class=\"token maybe-class-name\">Box</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x3C;</span><span class=\"token maybe-class-name\">App</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>Explanation</strong>:\n<ul>\n<li><strong><code>useInput</code></strong>: Hook that listens for input.</li>\n<li><strong>Dynamic Rendering</strong>: Using React components allows for seamless updates to the log display.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-vorpal\"><strong>3. Vorpal</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#3-vorpal\"></a></h5>\n<ul>\n<li>\n<p><strong><a href=\"https://github.com/dthree/vorpal\">Vorpal</a></strong> is a framework for building interactive CLIs, similar to interactive shells.</p>\n</li>\n<li>\n<p>It provides a command prompt that allows for commands to be entered interactively, and it’s a good choice if you want to keep a live REPL-like experience.</p>\n</li>\n<li>\n<p><strong>Example</strong>:</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> vorpal <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'vorpal'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvorpal\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">command</span><span class=\"token punctuation\">(</span><span class=\"token string\">'greet &#x3C;name>'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Greets a user by name.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">action</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">args<span class=\"token punctuation\">,</span> callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>args<span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvorpal\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">delimiter</span><span class=\"token punctuation\">(</span><span class=\"token string\">'sf-cli$'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token method function property-access\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><strong>Explanation</strong>:\n<ul>\n<li><strong>Live Shell</strong>: Vorpal creates a shell-like interface.</li>\n<li>You can run commands and get responses directly in an interactive shell loop.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"which-approach-should-you-choose\"><strong>Which Approach Should You Choose?</strong><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#which-approach-should-you-choose\"></a></h3>\n<ul>\n<li>\n<p><strong>Gluegun or Oclif Combined with Blessed or Ink</strong>:</p>\n<ul>\n<li>If you want the core CLI framework (like Gluegun or Oclif) to handle logic and argument parsing, while using <strong>Blessed</strong> or <strong>Ink</strong> to build out a sophisticated text-based user interface, this is a powerful combination.</li>\n<li><strong>Blessed</strong> provides a traditional terminal UI feel with panes, logs, and inputs, while <strong>Ink</strong> allows you to leverage React if you’re comfortable with that ecosystem.</li>\n</ul>\n</li>\n<li>\n<p><strong>Standalone TUI with Blessed/Ink/Vorpal</strong>:</p>\n<ul>\n<li>If your entire application needs to be <strong>interactive</strong> all the time, and you want a more fluid text-based interface, you could consider building directly with <strong>Blessed</strong>, <strong>Ink</strong>, or <strong>Vorpal</strong>.</li>\n<li><strong>Vorpal</strong> can give you an interactive shell, which may suffice if your commands are mostly typed input without requiring a detailed text-based display panel.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"summary\"><strong>Summary</strong>:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#summary\"></a></h3>\n<ul>\n<li>For your scenario, where you want a <strong>rich TUI with dynamic information</strong> displayed alongside a command prompt, <strong>Blessed</strong> or <strong>Ink</strong> would be the best libraries for building the <strong>interface</strong>.</li>\n<li>You could use <strong>Gluegun or Oclif</strong> as your <strong>command handler</strong> framework and integrate it into a larger TUI built with <strong>Blessed</strong> or <strong>Ink</strong>.</li>\n<li><strong>Gluegun</strong>’s modular approach can be more easily extended into a rich UI with <strong>Blessed</strong>, while <strong>Oclif</strong> is great for command organization if you prefer strict type-checking and plugin-based architecture.</li>\n</ul>\n<p>Feel free to ask if you need more guidance or an example that integrates <strong>Gluegun</strong> or <strong>Oclif</strong> with one of these TUI libraries!</p>\n<h2 id=\"how-does-gluegun-toolbox-provides-utilities-for-easy-integration-with-tui-libraries\">how does gluegun toolbox provides utilities for easy integration with TUI libraries?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#how-does-gluegun-toolbox-provides-utilities-for-easy-integration-with-tui-libraries\"></a></h2>\n<h2 id=\"references\">References<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#references\"></a></h2>\n<ul>\n<li><a href=\"https://developer.vonage.com/en/blog/comparing-cli-building-libraries\">https://developer.vonage.com/en/blog/comparing-cli-building-libraries</a></li>\n<li><a href=\"https://tlakomy.com/notes-egghead-cli-tooling-oclif-ts\">https://tlakomy.com/notes-egghead-cli-tooling-oclif-ts</a></li>\n<li><a href=\"https://www.joshcanhelp.com/oclif/\">https://www.joshcanhelp.com/oclif/</a></li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/wiki/notes/gjsaosaehcd6c442grpqedc\">Gluegun</a></li>\n<li><a href=\"/wiki/notes/i1211kezxlz8q23n9eb6j58\">Oclif</a></li>\n</ul>","noteIndex":{"id":"CpS9sdQeO83XthdjEzqoL","title":"djradon's wiki","desc":"","updated":1725596786107,"created":1631142505051,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"public-notes","remote":{"type":"git","url":"git@github.com:djradon/public-notes.git"},"name":"public-notes"},"contentHash":"bba9cf74d5d2d4e8dcab9ae4dbda62e9","links":[{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"ar.swyx.learn-in-public","alias":"learning-in-public","position":{"start":{"line":6,"column":20,"offset":56},"end":{"line":6,"column":66,"offset":102},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ar.swyx.learn-in-public"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"t","position":{"start":{"line":10,"column":3,"offset":228},"end":{"line":10,"column":8,"offset":233},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"t"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"idea","position":{"start":{"line":11,"column":3,"offset":258},"end":{"line":11,"column":11,"offset":266},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"idea"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"ar","position":{"start":{"line":13,"column":5,"offset":377},"end":{"line":13,"column":11,"offset":383},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ar"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"book","position":{"start":{"line":14,"column":5,"offset":426},"end":{"line":14,"column":13,"offset":434},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"book"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"community","position":{"start":{"line":15,"column":5,"offset":439},"end":{"line":15,"column":18,"offset":452},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"community"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"course","position":{"start":{"line":16,"column":5,"offset":457},"end":{"line":16,"column":15,"offset":467},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"course"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"event","position":{"start":{"line":17,"column":5,"offset":472},"end":{"line":17,"column":14,"offset":481},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"event"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"game","position":{"start":{"line":18,"column":5,"offset":486},"end":{"line":18,"column":13,"offset":494},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"game"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"loc","position":{"start":{"line":19,"column":5,"offset":499},"end":{"line":19,"column":12,"offset":506},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"loc"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"org","position":{"start":{"line":20,"column":5,"offset":511},"end":{"line":20,"column":12,"offset":518},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"org"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"user","position":{"start":{"line":21,"column":5,"offset":523},"end":{"line":21,"column":13,"offset":531},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"user"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"prdct","position":{"start":{"line":22,"column":5,"offset":537},"end":{"line":22,"column":14,"offset":546},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"prdct"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"recipe","position":{"start":{"line":23,"column":5,"offset":597},"end":{"line":23,"column":15,"offset":607},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"recipe"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"video","position":{"start":{"line":24,"column":5,"offset":612},"end":{"line":24,"column":14,"offset":621},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"video"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"vs","position":{"start":{"line":25,"column":3,"offset":658},"end":{"line":25,"column":9,"offset":664},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"vs"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"wanted","position":{"start":{"line":26,"column":3,"offset":667},"end":{"line":26,"column":13,"offset":677},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"wanted"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"tags","position":{"start":{"line":28,"column":5,"offset":707},"end":{"line":28,"column":13,"offset":715},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"tags"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"c","position":{"start":{"line":29,"column":5,"offset":779},"end":{"line":29,"column":10,"offset":784},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"c"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"p","position":{"start":{"line":30,"column":5,"offset":819},"end":{"line":30,"column":10,"offset":824},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"p"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"t.km.zettelkasten","position":{"start":{"line":32,"column":17,"offset":900},"end":{"line":32,"column":38,"offset":921},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"t.km.zettelkasten"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"user.Sönke-Ahrens","alias":"@Sönke-Ahrens","position":{"start":{"line":32,"column":109,"offset":992},"end":{"line":32,"column":122,"offset":1005},"indent":[]},"xvault":false,"to":{"fname":"user.Sönke-Ahrens"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"t.tm.getting-things-done","position":{"start":{"line":34,"column":13,"offset":1077},"end":{"line":34,"column":41,"offset":1105},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"t.tm.getting-things-done"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"user.andy-matuschak","alias":"@andy-matuschak","position":{"start":{"line":42,"column":134,"offset":1443},"end":{"line":42,"column":149,"offset":1458},"indent":[]},"xvault":false,"to":{"fname":"user.andy-matuschak"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"user.maggie-appleton","alias":"@maggie-appleton","position":{"start":{"line":42,"column":154,"offset":1463},"end":{"line":42,"column":170,"offset":1479},"indent":[]},"xvault":false,"to":{"fname":"user.maggie-appleton"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"ar.substack.carpe-noctem","position":{"start":{"line":44,"column":11,"offset":1568},"end":{"line":44,"column":39,"offset":1596},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"ar.substack.carpe-noctem"}},{"type":"wiki","from":{"fname":"root","id":"CpS9sdQeO83XthdjEzqoL","vaultName":"public-notes"},"value":"book.how-to-take-smart-notes","position":{"start":{"line":47,"column":7,"offset":1605},"end":{"line":47,"column":39,"offset":1637},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"book.how-to-take-smart-notes"}}],"anchors":{"purpose":{"type":"header","text":"Purpose","value":"purpose","line":10,"column":0,"depth":2},"contents":{"type":"header","text":"Contents","value":"contents","line":14,"column":0,"depth":2},"beware":{"type":"header","text":"Beware!","value":"beware","line":42,"column":0,"depth":2},"what-this-is-not":{"type":"header","text":"What This Is Not","value":"what-this-is-not","line":46,"column":0,"depth":2}},"children":["7272514wvvn78ppl0gxbz1o","1oo01iddhf8xrhghsn50s68","1xo3rb42oibz4c0ci2hns1w","j4v1t5j8jlertnw3qehr7eh","y4mse62vwwswwoy83dog5l8","vxdnqfler524hz0cijghw52","2d2rpnxxhmeddduz9k0hrb1","dfk38hodq90wterkjm41g6d","mt44zhi7hgua7aosvn41m20","d9iapeyx1ykhni9iub35s0j","48sncuimn75uzjhk3fhpnzk","b98hmcjkz5mxbemof53ecrg","x7kou1vhk03q2jo1xgis6ei","c5qcd8cate4ic318mkmmkn0","4o5r1utc0onqbp5y50jo4bv","ctw4hojtksuyqzrhmeuxxv7","ipdzhc7arjmmikv6cc9av4g","avll3ht5e6v6brobqu6tu4f","pk8PcdWdd5M38WncZRnzN","64sr0zgblkoq70tu21r2dpw","pr50duvmwnfu5pf0zohcftk","wfhwxyrxvc5wt4e7yd81ot4","6q10hkz3zuvnueqa9slqqmu","h8etzbpdi04ynqoka3yhiei","llras18my52v1xrhkbmk9c2","q9y3ud88060hd6zdz0myhdr","v6oz4wid9tn2mzmjhcgalzv","ggw3ek46ptgebsgxgihr1dh","4qppc4bpj9d3and3abrlvty","QgQWvVXn3EJF7RptGkK2z","VdoOKc3Rq9WmIDPW3ifi0","g24de3ikvaqmy6bp4m223t0","glaj6jozq0g9ia3qvht816v","y1gcp9ejsspitoo2rfeiu5p","mpq0j669d32a9hlcorxc937","spj6w1tzilmir3xrebxe24b","trjorpgtcp9hd17i840lhsj"],"parent":null,"data":{},"body":"\nWelcome! And beware!  \n\n## Purpose\n\nThis vault is the \"[[learning-in-public|ar.swyx.learn-in-public]]\" part of my Second Brain. If you share some of my interests, please [reach out](https://djradon.github.io)! \n\n## Contents\n\n- [[t]] my personal wikipedia\n- [[idea]] (not necessarily mine)\n- Resource Notes, including highlights, thoughts and metadata, for various things:\n  - [[ar]] mostly articles, papers and web pages\n  - [[book]]\n  - [[community]]\n  - [[course]]\n  - [[event]]\n  - [[game]]\n  - [[loc]]\n  - [[org]]\n  - [[user]] \n  - [[prdct]] mostly software products, but also ontologies\n  - [[recipe]]\n  - [[video]] movies, tv episodes, youtube, etc\n- [[vs]]\n- [[wanted]]\n- Some \"Metadata Notes\":\n  - [[tags]] which may refer to any and multiple (or none) of the above\n  - [[c]]: ways to categorize resources\n  - [[p]]: ways to assert things about resources (mostly abandoned)\n\nIn terms of the [[t.km.zettelkasten]] method, this wiki is a commingling of literature notes with something @Sönke-Ahrens warned about: a \"personal Wikipedia or a database\" [^1]. \n\nIn terms of [[t.tm.getting-things-done]], it's references, someday-maybe, next actions, and public projects.\n\n## Beware!\n\nThis is a cluttered cupboard of jumbled jottings riddled with inaccuracies, confusion, and mistakes.\n\n## What This Is Not\n\n- evergreen-notes/digital-garden: for \"synthesized\" / original-ish publishable big-idea notes that should evolve over time, props to @andy-matuschak and @maggie-appleton\n- blog: for \"point-in-time\" items to be shared: personal news, articles, etc.\n  - e.g., [[ar.substack.carpe-noctem]]\n\n\n[^1]: [[book.how-to-take-smart-notes]]  "},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"none","confirmVaultOnCreate":true,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"selection","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"none"},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.83.0","vaults":[{"fsPath":"public-notes","remote":{"type":"git","url":"git@github.com:djradon/public-notes.git"},"name":"public-notes"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"djradon's wiki","description":"a personal knowledge space"},"github":{"enableEditLink":false,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteUrl":"https://djradon.github.io","assetsPrefix":"/wiki","ga":{"tracking":"G-X7H6C4TMC7"},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}